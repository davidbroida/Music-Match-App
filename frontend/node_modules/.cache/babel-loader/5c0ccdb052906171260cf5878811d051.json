{"ast":null,"code":"var _jsxFileName = \"/Users/davidbroida/Desktop/MusicMatch2/frontend/src/components/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useAuth from '../useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport Playlist from './Playlist';\nimport NewReleases from './NewReleases';\nimport { Container } from 'react-bootstrap';\nimport SearchPage from './SearchPage';\nimport Player from './Player';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AUTH_URL = \"https://accounts.spotify.com/authorize?client_id=04306bc8614e44bbb0f6f8071bb81e01&response_type=code&redirect_uri=http://localhost:3000&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state\";\nconst code = new URLSearchParams(window.location.search).get('code');\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '04306bc8614e44bbb0f6f8071bb81e01'\n});\n\nfunction Dashboard(_ref) {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState([]);\n  const [playingSong, setPlayingSong] = useState();\n  const [newReleases, setNewReleases] = useState([]);\n  console.log(playlists);\n  console.log(newReleases); // console.log(playlists);\n\n  function choosePlaylist(playlist) {\n    setPlayingSong(playlist);\n  }\n\n  function chooseNewRelease(album) {\n    setNewReleases(album);\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getNewReleases({\n      limit: 10,\n      offset: 0,\n      country: 'US'\n    }).then(res => {\n      console.log(res.body);\n      setNewReleases(res.body.albums.items.map(album => {\n        return {\n          name: album.name,\n          uri: album.uri,\n          albumUrl: album.images[0].url\n        };\n      }));\n    }, function (err) {\n      console.log(\"Something went wrong!\", err);\n    });\n  }, [accessToken]);\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getPlaylistsForCategory('party', {\n      country: 'US',\n      limit: 10,\n      offset: 0\n    }).then(res => {\n      console.log(res.body);\n      setPlaylists(res.body.playlists.items.map(playlist => {\n        return {\n          name: playlist.name,\n          description: playlist.description,\n          uri: playlist.uri,\n          albumUrl: playlist.images[0].url\n        };\n      }));\n    }, function (err) {\n      console.log(\"Something went wrong!\", err);\n    });\n  }, [accessToken]); // if (code) {\n  //   return (\n  //     <SearchPage code={code} />\n  //   )\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          className: \"flex-row\",\n          style: {\n            width: \"100%\",\n            height: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"New Releases\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), newReleases.map(album => /*#__PURE__*/_jsxDEV(NewReleases, {\n            album: album,\n            chooseNewRelease: chooseNewRelease\n          }, album.uri, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          className: \"flex-row\",\n          style: {\n            width: \"100%\",\n            height: \"100%\"\n          },\n          children: playlists.map(playlist => /*#__PURE__*/_jsxDEV(Playlist, {\n            playlist: playlist,\n            choosePlaylist: choosePlaylist\n          }, playlist.uri, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        id: \"search-btn\",\n        className: \"btn btn-success btn-lg display-flex\",\n        href: \"/loadsearch\",\n        children: \"Search Music\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"music-player\",\n      children: /*#__PURE__*/_jsxDEV(Player, {\n        accessToken: accessToken,\n        trackUri: playingSong === null || playingSong === void 0 ? void 0 : playingSong.uri\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"F8GQLGdoxzanQVMskq6sU8fkhD8=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/davidbroida/Desktop/MusicMatch2/frontend/src/components/Dashboard.js"],"names":["React","useState","useEffect","useAuth","SpotifyWebApi","Playlist","NewReleases","Container","SearchPage","Player","AUTH_URL","code","URLSearchParams","window","location","search","get","SpotifyApi","clientId","Dashboard","accessToken","playlists","setPlaylists","playingSong","setPlayingSong","newReleases","setNewReleases","console","log","choosePlaylist","playlist","chooseNewRelease","album","setAccessToken","getNewReleases","limit","offset","country","then","res","body","albums","items","map","name","uri","albumUrl","images","url","err","getPlaylistsForCategory","description","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useAuth from '../useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport Playlist from './Playlist';\nimport NewReleases from './NewReleases';\nimport { Container } from 'react-bootstrap';\nimport SearchPage from './SearchPage';\nimport Player from './Player';\n\nconst AUTH_URL = \"https://accounts.spotify.com/authorize?client_id=04306bc8614e44bbb0f6f8071bb81e01&response_type=code&redirect_uri=http://localhost:3000&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state\";\n\nconst code = new URLSearchParams(window.location.search).get('code');\n\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '04306bc8614e44bbb0f6f8071bb81e01',\n})\n\nfunction Dashboard({ code }) {\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState([]);\n  const [playingSong, setPlayingSong] = useState();\n  const [newReleases, setNewReleases] = useState([]);\n  console.log(playlists);\n  console.log(newReleases);\n  // console.log(playlists);\n\n  function choosePlaylist(playlist) {\n    setPlayingSong(playlist);\n  }\n  function chooseNewRelease(album) {\n    setNewReleases(album);\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken)\n  }, [accessToken]);\n\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getNewReleases({ limit: 10, offset: 0, country: 'US' })\n      .then(res => {\n        console.log(res.body)\n        setNewReleases(res.body.albums.items.map(album => {\n\n          return {\n            name: album.name,\n            uri: album.uri,\n            albumUrl: album.images[0].url\n          }\n        }))\n      }, function (err) {\n        console.log(\"Something went wrong!\", err);\n      });\n  }, [accessToken]);\n\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getPlaylistsForCategory('party', {\n      country: 'US',\n      limit: 10,\n      offset: 0\n    })\n      .then(res => {\n        console.log(res.body)\n        setPlaylists(res.body.playlists.items.map(playlist => {\n\n          return {\n            name: playlist.name,\n            description: playlist.description,\n            uri: playlist.uri,\n            albumUrl: playlist.images[0].url\n          }\n        }))\n      }, function (err) {\n        console.log(\"Something went wrong!\", err);\n      });\n  }, [accessToken]);\n\n  // if (code) {\n  //   return (\n  //     <SearchPage code={code} />\n  //   )\n  // }\n\n  return (\n    <div>\n      <div>\n        <div>\n          <Container className=\"flex-row\" style={{ width: \"100%\", height: \"100%\" }}  >\n            <h3>New Releases</h3>\n            {newReleases.map(album => (\n              <NewReleases album={album} key={album.uri} chooseNewRelease={chooseNewRelease} />\n            ))}\n          </Container >\n        </div>\n        <div>\n          <Container className=\"flex-row\" style={{ width: \"100%\", height: \"100%\" }}  >\n            {playlists.map(playlist => (\n              <Playlist playlist={playlist} key={playlist.uri} choosePlaylist={choosePlaylist} />\n            ))}\n          </Container>\n        </div>\n        <a id=\"search-btn\" className=\"btn btn-success btn-lg display-flex\" href='/loadsearch'>Search Music</a>\n      </div>\n      <br></br>\n      <div className=\"music-player\">\n        <Player accessToken={accessToken} trackUri={playingSong?.uri} />\n      </div>\n    </div>\n  )\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}