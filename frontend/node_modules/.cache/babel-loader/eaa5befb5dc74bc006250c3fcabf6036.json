{"ast":null,"code":"var _jsxFileName = \"/Users/davidbroida/Desktop/MusicMatch2/frontend/src/components/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useAuth from '../useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport Playlist from './Playlist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '04306bc8614e44bbb0f6f8071bb81e01'\n});\n\nfunction Dashboard(_ref) {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState(); // console.log(playlists);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken);\n  }, [accessToken]); // console.log(accessToken);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getPlaylistsForCategory('party', {\n      country: 'US',\n      limit: 10,\n      offset: 0\n    }).then(function (data) {\n      setPlaylists(data.body.playlists.items); // let output = data.body.playlists.items.map(item => item.href);\n      // console.log(output);\n    }, function (err) {\n      console.log(\"Something went wrong!\", err);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Playlist Page Loaded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"eIY2V2xXfUEI0lGHngWJLpNf1YY=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/davidbroida/Desktop/MusicMatch2/frontend/src/components/Dashboard.js"],"names":["React","useState","useEffect","useAuth","SpotifyWebApi","Playlist","SpotifyApi","clientId","Dashboard","code","accessToken","playlists","setPlaylists","setAccessToken","getPlaylistsForCategory","country","limit","offset","then","data","body","items","err","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,UAAU,GAAG,IAAIF,aAAJ,CAAkB;AACnCG,EAAAA,QAAQ,EAAE;AADyB,CAAlB,CAAnB;;AAKA,SAASC,SAAT,OAA6B;AAAA;;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;AAC3B,QAAMC,WAAW,GAAGP,OAAO,CAACM,IAAD,CAA3B;AACA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,EAA1C,CAF2B,CAG3B;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACQ,WAAL,EAAkB;AAClBJ,IAAAA,UAAU,CAACO,cAAX,CAA0BH,WAA1B;AACD,GAHQ,EAGN,CAACA,WAAD,CAHM,CAAT,CAL2B,CAU3B;;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACQ,WAAL,EAAkB;AAElBJ,IAAAA,UAAU,CAACQ,uBAAX,CAAmC,OAAnC,EAA4C;AAC1CC,MAAAA,OAAO,EAAE,IADiC;AAE1CC,MAAAA,KAAK,EAAE,EAFmC;AAG1CC,MAAAA,MAAM,EAAE;AAHkC,KAA5C,EAKGC,IALH,CAKQ,UAAUC,IAAV,EAAgB;AACpBP,MAAAA,YAAY,CAACO,IAAI,CAACC,IAAL,CAAUT,SAAV,CAAoBU,KAArB,CAAZ,CADoB,CAEpB;AACA;AACD,KATH,EASK,UAAUC,GAAV,EAAe;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,GAArC;AACD,KAXH;AAYD,GAfQ,EAeN,EAfM,CAAT;AAiBA,sBACE;AAAA,2BAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAvCQd,S;UACaL,O;;;KADbK,S;AAyCT,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useAuth from '../useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport Playlist from './Playlist';\n\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '04306bc8614e44bbb0f6f8071bb81e01',\n})\n\n\nfunction Dashboard({ code }) {\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState();\n  // console.log(playlists);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken)\n  }, [accessToken]);\n\n  // console.log(accessToken);\n\n  useEffect(() => {\n    if (!accessToken) return;\n\n    SpotifyApi.getPlaylistsForCategory('party', {\n      country: 'US',\n      limit: 10,\n      offset: 0\n    })\n      .then(function (data) {\n        setPlaylists(data.body.playlists.items);\n        // let output = data.body.playlists.items.map(item => item.href);\n        // console.log(output);\n      }, function (err) {\n        console.log(\"Something went wrong!\", err);\n      });\n  }, []);\n\n  return (\n    <div>\n\n      <h1>Playlist Page Loaded</h1>\n      {/* {playlists.map(playlist => (\n        <Playlist url={playlist.href} key={playlist.href} accessToken={accessToken} />\n      ))} */}\n\n    </div>\n  )\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}