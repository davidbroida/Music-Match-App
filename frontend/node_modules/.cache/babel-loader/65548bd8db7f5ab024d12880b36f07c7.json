{"ast":null,"code":"var _jsxFileName = \"/Users/davidbroida/Desktop/MusicMatch2/frontend/src/components/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useAuth from '../useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport Playlist from './Playlist';\nimport { Container } from 'react-bootstrap';\nimport SearchPage from './SearchPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '04306bc8614e44bbb0f6f8071bb81e01'\n});\nconst AUTH_URL = \"https://accounts.spotify.com/authorize?client_id=04306bc8614e44bbb0f6f8071bb81e01&response_type=code&redirect_uri=http://localhost:3000&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state\";\nconst code = new URLSearchParams(window.location.search).get('code');\n\nfunction Dashboard(_ref) {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState([]);\n  console.log(playlists);\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getPlaylistsForCategory('party', {\n      country: 'US',\n      limit: 20,\n      offset: 0\n    }).then(res => {\n      console.log(res.body);\n      setPlaylists(res.body.playlists.items.map(playlist => {\n        return {\n          name: playlist.name,\n          description: playlist.description,\n          uri: playlist.uri,\n          albumUrl: playlist.images[0].url\n        };\n      })); // console.log(res.body);\n    }, function (err) {\n      console.log(\"Something went wrong!\", err);\n    });\n  }, [accessToken]); // function loadSearchPage() {\n  //   return (\n  //     <SearchPage code={code} />\n  //   )\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        className: \"flex-row\",\n        style: {\n          width: \"100%\",\n          height: \"50%\"\n        },\n        children: playlists.map(playlist => /*#__PURE__*/_jsxDEV(Playlist, {\n          playlist: playlist\n        }, playlist.uri, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"btn btn-success btn-lg\",\n        href: AUTH_URL,\n        children: \"Search Music\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"7zJmTZZqALEQ3MRMUA19UAc6DgA=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/davidbroida/Desktop/MusicMatch2/frontend/src/components/Dashboard.js"],"names":["React","useState","useEffect","useAuth","SpotifyWebApi","Playlist","Container","SearchPage","SpotifyApi","clientId","AUTH_URL","code","URLSearchParams","window","location","search","get","Dashboard","accessToken","playlists","setPlaylists","console","log","setAccessToken","getPlaylistsForCategory","country","limit","offset","then","res","body","items","map","playlist","name","description","uri","albumUrl","images","url","err","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useAuth from '../useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport Playlist from './Playlist';\nimport { Container } from 'react-bootstrap';\nimport SearchPage from './SearchPage';\n\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '04306bc8614e44bbb0f6f8071bb81e01',\n})\n\nconst AUTH_URL = \"https://accounts.spotify.com/authorize?client_id=04306bc8614e44bbb0f6f8071bb81e01&response_type=code&redirect_uri=http://localhost:3000&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state\";\n\nconst code = new URLSearchParams(window.location.search).get('code');\n\nfunction Dashboard({ code }) {\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState([]);\n  console.log(playlists);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken)\n  }, [accessToken]);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getPlaylistsForCategory('party', {\n      country: 'US',\n      limit: 20,\n      offset: 0\n    })\n      .then(res => {\n        console.log(res.body)\n        setPlaylists(res.body.playlists.items.map(playlist => {\n\n          return {\n            name: playlist.name,\n            description: playlist.description,\n            uri: playlist.uri,\n            albumUrl: playlist.images[0].url\n          }\n        }))\n        // console.log(res.body);\n      }, function (err) {\n        console.log(\"Something went wrong!\", err);\n      });\n  }, [accessToken]);\n\n\n  // function loadSearchPage() {\n  //   return (\n  //     <SearchPage code={code} />\n  //   )\n  // }\n\n  return (\n    <div>\n      <div>\n        <Container className=\"flex-row\" style={{ width: \"100%\", height: \"50%\" }} >\n          {playlists.map(playlist => (\n            <Playlist playlist={playlist} key={playlist.uri} />\n          ))}\n        </Container >\n        <a className=\"btn btn-success btn-lg\" href={AUTH_URL}>Search Music</a>\n        {/* <button className=\"btn btn-success btn-lg\" onClick={loadSearchPage}>Search Music</button> */}\n      </div>\n    </div>\n  )\n\n}\n\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}