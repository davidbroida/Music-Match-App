{"ast":null,"code":"var _jsxFileName = \"/Users/davidbroida/Desktop/MusicMatch2/frontend/src/components/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useAuth from '../useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport Playlist from './Playlist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '04306bc8614e44bbb0f6f8071bb81e01'\n});\n\nfunction Dashboard(_ref) {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState([]); // const [loading, setLoading] = useState(true);\n\n  console.log('playlists:', playlists);\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken);\n  }, [accessToken]); // console.log(accessToken);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getPlaylistsForCategory('party', {\n      country: 'BR',\n      limit: 10,\n      offset: 0\n    }).then(function (data) {\n      let output = data.body.playlists.items.map(item => item.images[0].url);\n      setPlaylists(output); // console.log(output);\n      // let output = data\n      // console.log(output);\n    }, function (err) {\n      console.log(\"Something went wrong!\", err);\n    });\n  }, [accessToken]);\n\n  if (!playlists) {\n    return 'loading playlists...';\n  } else {\n    for (let i = 0; i < playlists.length; i++) {\n      return playlists[i];\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Playlist, {\n        url: playlists[i].href\n      }, playlists[i].href, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Dashboard, \"7zJmTZZqALEQ3MRMUA19UAc6DgA=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/davidbroida/Desktop/MusicMatch2/frontend/src/components/Dashboard.js"],"names":["React","useState","useEffect","useAuth","SpotifyWebApi","Playlist","SpotifyApi","clientId","Dashboard","code","accessToken","playlists","setPlaylists","console","log","setAccessToken","getPlaylistsForCategory","country","limit","offset","then","data","output","body","items","map","item","images","url","err","i","length","href"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,UAAU,GAAG,IAAIF,aAAJ,CAAkB;AACnCG,EAAAA,QAAQ,EAAE;AADyB,CAAlB,CAAnB;;AAKA,SAASC,SAAT,OAA6B;AAAA;;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;AAC3B,QAAMC,WAAW,GAAGP,OAAO,CAACM,IAAD,CAA3B;AACA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C,CAF2B,CAI3B;;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,SAA1B;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACQ,WAAL,EAAkB;AAClBJ,IAAAA,UAAU,CAACS,cAAX,CAA0BL,WAA1B;AACD,GAHQ,EAGN,CAACA,WAAD,CAHM,CAAT,CAP2B,CAY3B;;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACQ,WAAL,EAAkB;AAClBJ,IAAAA,UAAU,CAACU,uBAAX,CAAmC,OAAnC,EAA4C;AAC1CC,MAAAA,OAAO,EAAE,IADiC;AAE1CC,MAAAA,KAAK,EAAE,EAFmC;AAG1CC,MAAAA,MAAM,EAAE;AAHkC,KAA5C,EAKGC,IALH,CAKQ,UAAUC,IAAV,EAAgB;AACpB,UAAIC,MAAM,GAAGD,IAAI,CAACE,IAAL,CAAUZ,SAAV,CAAoBa,KAApB,CAA0BC,GAA1B,CAA8BC,IAAI,IAAIA,IAAI,CAACC,MAAL,CAAY,CAAZ,EAAeC,GAArD,CAAb;AACAhB,MAAAA,YAAY,CAACU,MAAD,CAAZ,CAFoB,CAGpB;AACA;AACA;AAED,KAZH,EAYK,UAAUO,GAAV,EAAe;AAChBhB,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCe,GAArC;AACD,KAdH;AAeD,GAjBQ,EAiBN,CAACnB,WAAD,CAjBM,CAAT;;AAmBA,MAAI,CAACC,SAAL,EAAgB;AACd,WAAO,sBAAP;AACD,GAFD,MAEO;AACL,SAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,SAAS,CAACoB,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,aAAOnB,SAAS,CAACmB,CAAD,CAAhB;AACD;;AACD,wBACE;AAAA,6BAEE,QAAE,QAAF;AAAmC,QAAA,GAAG,EAAEnB,SAAS,CAACmB,CAAD,CAAT,CAAaE;AAArD,SAAgBrB,SAAS,CAACmB,CAAD,CAAT,CAAaE,IAA7B;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;AAGF;;GAjDQxB,S;UACaL,O;;;KADbK,S;AAmDT,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useAuth from '../useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport Playlist from './Playlist';\n\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '04306bc8614e44bbb0f6f8071bb81e01',\n})\n\n\nfunction Dashboard({ code }) {\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState([]);\n\n  // const [loading, setLoading] = useState(true);\n  console.log('playlists:', playlists);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken)\n  }, [accessToken]);\n\n  // console.log(accessToken);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getPlaylistsForCategory('party', {\n      country: 'BR',\n      limit: 10,\n      offset: 0\n    })\n      .then(function (data) {\n        let output = data.body.playlists.items.map(item => item.images[0].url);\n        setPlaylists(output);\n        // console.log(output);\n        // let output = data\n        // console.log(output);\n\n      }, function (err) {\n        console.log(\"Something went wrong!\", err);\n      });\n  }, [accessToken]);\n\n  if (!playlists) {\n    return 'loading playlists...'\n  } else {\n    for (let i = 0; i < playlists.length; i++) {\n      return playlists[i]\n    }\n    return (\n      <div>\n\n        < Playlist key={playlists[i].href} url={playlists[i].href} />\n\n      </div>\n    )\n  }\n\n\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}