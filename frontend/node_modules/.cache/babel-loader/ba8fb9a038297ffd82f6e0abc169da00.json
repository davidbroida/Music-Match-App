{"ast":null,"code":"var _jsxFileName = \"/Users/davidbroida/Desktop/MusicMatch2/frontend/src/components/Homepage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useAuth from '../useAuth';\nimport { Container, Form } from 'react-bootstrap';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport Song from './Song';\nimport Player from './Player';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '04306bc8614e44bbb0f6f8071bb81e01'\n});\n\nfunction Homepage(_ref) {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [playingSong, setPlayingSong] = useState();\n  const [lyrics, setLyrics] = useState('');\n  console.log(searchResults);\n\n  function chooseSong(song) {\n    setPlayingSong(song);\n    setSearch('');\n    setLyrics('');\n  }\n\n  useEffect(() => {\n    if (!playingSong) return;\n    axios.get('http://localhost:3001/lyrics', {\n      params: {\n        song: playingSong.title,\n        artist: playingSong.artist\n      }\n    }).then(res => {\n      setLyrics(res.data.lyrics);\n    });\n  }, [playingSong]);\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    SpotifyApi.searchTracks(search).then(res => {\n      setSearchResults(res.body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"d-flex flex-column py-2\",\n    style: {\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n      type: \"search\",\n      placeholder: \"Search songs...\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow-1 my-2\",\n      style: {\n        overflowY: \"auto\"\n      },\n      children: [searchResults.map(song => /*#__PURE__*/_jsxDEV(Song, {\n        song: song,\n        chooseSong: chooseSong\n      }, song.uri, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)), searchResults.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        style: {\n          whiteSpace: \"pre\"\n        },\n        children: lyrics\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Player, {\n        accessToken: accessToken,\n        trackUri: playingSong === null || playingSong === void 0 ? void 0 : playingSong.uri\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Homepage, \"vOWnT3rach0so4H1e5KOrWJxpEc=\", false, function () {\n  return [useAuth];\n});\n\n_c = Homepage;\nexport default Homepage;\n\nvar _c;\n\n$RefreshReg$(_c, \"Homepage\");","map":{"version":3,"sources":["/Users/davidbroida/Desktop/MusicMatch2/frontend/src/components/Homepage.js"],"names":["React","useState","useEffect","useAuth","Container","Form","SpotifyWebApi","Song","Player","axios","SpotifyApi","clientId","Homepage","code","accessToken","search","setSearch","searchResults","setSearchResults","playingSong","setPlayingSong","lyrics","setLyrics","console","log","chooseSong","song","get","params","title","artist","then","res","data","setAccessToken","searchTracks","body","tracks","items","map","track","smallestAlbumImage","album","images","reduce","smallest","image","height","artists","name","uri","albumUrl","url","e","target","value","overflowY","length","whiteSpace"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useAuth from '../useAuth';\nimport { Container, Form } from 'react-bootstrap';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport Song from './Song';\nimport Player from './Player';\nimport axios from 'axios';\n\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '04306bc8614e44bbb0f6f8071bb81e01',\n})\n\nfunction Homepage({ code }) {\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [playingSong, setPlayingSong] = useState();\n  const [lyrics, setLyrics] = useState('');\n  console.log(searchResults);\n\n  function chooseSong(song) {\n    setPlayingSong(song);\n    setSearch('');\n    setLyrics('');\n  }\n\n  useEffect(() => {\n    if (!playingSong) return\n\n    axios.get('http://localhost:3001/lyrics', {\n      params: {\n        song: playingSong.title,\n        artist: playingSong.artist\n      }\n    }).then(res => {\n      setLyrics(res.data.lyrics);\n    })\n  }, [playingSong])\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken)\n  }, [accessToken]);\n\n  useEffect(() => {\n    if (!search) return setSearchResults([])\n    if (!accessToken) return;\n\n    SpotifyApi.searchTracks(search).then(res => {\n\n      setSearchResults(res.body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image\n          return smallest\n        }, track.album.images[0])\n\n\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        }\n      }))\n    })\n  }, [search, accessToken])\n\n  return (\n    <Container className=\"d-flex flex-column py-2\" style={{ height: \"100vh\" }} >\n      <Form.Control type=\"search\" placeholder=\"Search songs...\" value={search} onChange={e => setSearch(e.target.value)} />\n      <div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\n        {searchResults.map(song => (\n          < Song song={song} key={song.uri} chooseSong={chooseSong} />\n        ))}\n        {searchResults.length === 0 && (\n          <div className=\"text-center\" style={{ whiteSpace: \"pre\" }}>\n            {lyrics}\n          </div>\n        )}\n      </div>\n      <div>\n        <Player accessToken={accessToken} trackUri={playingSong?.uri} />\n      </div>\n    </Container >\n  )\n}\n\nexport default Homepage;"]},"metadata":{},"sourceType":"module"}