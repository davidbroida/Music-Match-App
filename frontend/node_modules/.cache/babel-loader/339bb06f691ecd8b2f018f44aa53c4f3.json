{"ast":null,"code":"var _jsxFileName = \"/Users/davidbroida/Desktop/MusicMatch2/frontend/src/components/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useAuth from '../useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport Playlist from './Playlist';\nimport NewReleases from './NewReleases';\nimport { Container } from 'react-bootstrap';\nimport SearchPage from './SearchPage';\nimport Player from './Player';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AUTH_URL = \"https://accounts.spotify.com/authorize?client_id=04306bc8614e44bbb0f6f8071bb81e01&response_type=code&redirect_uri=http://localhost:3000&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state\";\nconst code = new URLSearchParams(window.location.search).get('code');\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '04306bc8614e44bbb0f6f8071bb81e01'\n});\n\nfunction Dashboard(_ref) {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState([]);\n  const [playingSong, setPlayingSong] = useState();\n  const [newReleases, setNewReleases] = useState([]);\n  localStorage.setItem('accessCode', code);\n  const storedCode = localStorage.getItem('accessCode');\n\n  function choosePlaylist(playlist) {\n    setPlayingSong(playlist);\n  }\n\n  function chooseNewRelease(album) {\n    setPlayingSong(album);\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getNewReleases({\n      limit: 13,\n      offset: 0,\n      country: 'US'\n    }).then(res => {\n      console.log(res.body);\n      setNewReleases(res.body.albums.items.map(album => {\n        return {\n          name: album.name,\n          uri: album.uri,\n          albumUrl: album.images[0].url\n        };\n      }));\n    }, function (err) {\n      console.log(\"Something went wrong!\", err);\n    });\n  }, [accessToken]);\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getPlaylistsForCategory('party', {\n      country: 'US',\n      limit: 10,\n      offset: 0\n    }).then(res => {\n      console.log(res.body);\n      setPlaylists(res.body.playlists.items.map(playlist => {\n        return {\n          name: playlist.name,\n          description: playlist.description,\n          uri: playlist.uri,\n          albumUrl: playlist.images[0].url\n        };\n      }));\n    }, function (err) {\n      console.log(\"Something went wrong!\", err);\n    });\n  }, [accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-row\",\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          className: \"flex-row\",\n          children: playlists.map(playlist => /*#__PURE__*/_jsxDEV(Playlist, {\n            playlist: playlist,\n            choosePlaylist: choosePlaylist\n          }, playlist.uri, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          className: \"flex-row\",\n          children: newReleases.map(album => /*#__PURE__*/_jsxDEV(NewReleases, {\n            album: album,\n            chooseNewRelease: chooseNewRelease\n          }, album.uri, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/seach\",\n        children: \"Search Songs & Lyrics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"music-player\",\n      children: /*#__PURE__*/_jsxDEV(Player, {\n        accessToken: accessToken,\n        trackUri: playingSong === null || playingSong === void 0 ? void 0 : playingSong.uri\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"F8GQLGdoxzanQVMskq6sU8fkhD8=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/davidbroida/Desktop/MusicMatch2/frontend/src/components/Dashboard.js"],"names":["React","useState","useEffect","useAuth","SpotifyWebApi","Playlist","NewReleases","Container","SearchPage","Player","useLocalStorage","Link","AUTH_URL","code","URLSearchParams","window","location","search","get","SpotifyApi","clientId","Dashboard","accessToken","playlists","setPlaylists","playingSong","setPlayingSong","newReleases","setNewReleases","localStorage","setItem","storedCode","getItem","choosePlaylist","playlist","chooseNewRelease","album","setAccessToken","getNewReleases","limit","offset","country","then","res","console","log","body","albums","items","map","name","uri","albumUrl","images","url","err","getPlaylistsForCategory","description"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useAuth from '../useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport Playlist from './Playlist';\nimport NewReleases from './NewReleases';\nimport { Container } from 'react-bootstrap';\nimport SearchPage from './SearchPage';\nimport Player from './Player';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { Link } from 'react-router-dom';\n\nconst AUTH_URL = \"https://accounts.spotify.com/authorize?client_id=04306bc8614e44bbb0f6f8071bb81e01&response_type=code&redirect_uri=http://localhost:3000&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state\";\n\nconst code = new URLSearchParams(window.location.search).get('code');\n\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '04306bc8614e44bbb0f6f8071bb81e01',\n})\n\nfunction Dashboard({ code }) {\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState([]);\n  const [playingSong, setPlayingSong] = useState();\n  const [newReleases, setNewReleases] = useState([]);\n\n  localStorage.setItem('accessCode', code)\n  const storedCode = localStorage.getItem('accessCode');\n\n  function choosePlaylist(playlist) {\n    setPlayingSong(playlist);\n  }\n  function chooseNewRelease(album) {\n    setPlayingSong(album);\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken)\n  }, [accessToken]);\n\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getNewReleases({ limit: 13, offset: 0, country: 'US' })\n      .then(res => {\n        console.log(res.body)\n        setNewReleases(res.body.albums.items.map(album => {\n\n          return {\n            name: album.name,\n            uri: album.uri,\n            albumUrl: album.images[0].url\n          }\n        }))\n      }, function (err) {\n        console.log(\"Something went wrong!\", err);\n      });\n  }, [accessToken]);\n\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getPlaylistsForCategory('party', {\n      country: 'US',\n      limit: 10,\n      offset: 0\n    })\n      .then(res => {\n        console.log(res.body)\n        setPlaylists(res.body.playlists.items.map(playlist => {\n\n          return {\n            name: playlist.name,\n            description: playlist.description,\n            uri: playlist.uri,\n            albumUrl: playlist.images[0].url\n          }\n        }))\n      }, function (err) {\n        console.log(\"Something went wrong!\", err);\n      });\n  }, [accessToken]);\n\n  return (\n    <div>\n      <div>\n        <div className=\"top-row\">\n          <Container className=\"flex-row\"   >\n            {playlists.map(playlist => (\n              <Playlist playlist={playlist} key={playlist.uri} choosePlaylist={choosePlaylist} />\n            ))}\n          </Container>\n        </div>\n        <div>\n          <Container className=\"flex-row\"  >\n            {newReleases.map(album => (\n              <NewReleases album={album} key={album.uri} chooseNewRelease={chooseNewRelease} />\n            ))}\n          </Container >\n        </div>\n        {/* <a id=\"search-btn\" className=\"btn btn-success btn-lg display-flex\" href='/loadsearch'>Search Music + Lyrics</a> */}\n        <Link to=\"/seach\">\n          Search Songs & Lyrics\n          {/* {currentUser.first_name || currentUser.username} */}\n        </Link>\n      </div>\n      <br></br>\n      <div className=\"music-player\">\n        <Player accessToken={accessToken} trackUri={playingSong?.uri} />\n      </div>\n    </div >\n  )\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}