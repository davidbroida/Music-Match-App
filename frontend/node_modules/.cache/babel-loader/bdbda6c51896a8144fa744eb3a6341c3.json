{"ast":null,"code":"var _jsxFileName = \"/Users/davidbroida/Desktop/MusicMatch2/frontend/src/components/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useAuth from '../useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport Playlist from './Playlist';\nimport { Container } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '04306bc8614e44bbb0f6f8071bb81e01'\n});\n\nfunction Dashboard(_ref) {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState([]);\n  console.log(playlists); // const [loading, setLoading] = useState(true);\n  // console.log('playlists:', playlists);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken);\n  }, [accessToken]); // console.log(accessToken);\n  // useEffect(() => {\n  //   if (!accessToken) return;\n  //   SpotifyApi.getPlaylistsForCategory('party', {\n  //     country: 'BR',\n  //     limit: 10,\n  //     offset: 0\n  //   })\n  //     .then(function (data) {\n  //       let output = data.body.playlists.items.map(item => item.images[0].url);\n  //       setPlaylists(output);\n  //       // console.log(output);\n  //       // let output = data\n  //       // console.log(output);\n  //     }, function (err) {\n  //       console.log(\"Something went wrong!\", err);\n  //     });\n  // }, [accessToken]);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getPlaylistsForCategory('party', {\n      country: 'US',\n      limit: 20,\n      offset: 0\n    }).then(res => {\n      console.log(res.body);\n      setPlaylists(res.body.playlists.items.map(playlist => {\n        // const smallestPlaylistImage = playlist.images.reduce((smallest, image) => {\n        //   if (image.height < smallest.height) return image\n        //   return smallest\n        // }, [])\n        return {\n          name: playlist.name,\n          description: playlist.description,\n          uri: playlist.uri,\n          albumUrl: playlist.images[0].url\n        };\n      })); // console.log(res.body);\n    }, function (err) {\n      console.log(\"Something went wrong!\", err);\n    });\n  }, [accessToken]);\n\n  if (!playlists) {\n    return 'loading playlists...';\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        classname: \"align-left\",\n        children: \"Recommended Playlists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          className: \" flex-row\",\n          style: {\n            height: \"100vh\"\n          },\n          children: playlists.map(playlist => /*#__PURE__*/_jsxDEV(Playlist, {\n            playlist: playlist\n          }, playlist.uri, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Dashboard, \"7zJmTZZqALEQ3MRMUA19UAc6DgA=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/davidbroida/Desktop/MusicMatch2/frontend/src/components/Dashboard.js"],"names":["React","useState","useEffect","useAuth","SpotifyWebApi","Playlist","Container","SpotifyApi","clientId","Dashboard","code","accessToken","playlists","setPlaylists","console","log","setAccessToken","getPlaylistsForCategory","country","limit","offset","then","res","body","items","map","playlist","name","description","uri","albumUrl","images","url","err","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,SAAT,QAA0B,iBAA1B;;AAEA,MAAMC,UAAU,GAAG,IAAIH,aAAJ,CAAkB;AACnCI,EAAAA,QAAQ,EAAE;AADyB,CAAlB,CAAnB;;AAKA,SAASC,SAAT,OAA6B;AAAA;;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;AAC3B,QAAMC,WAAW,GAAGR,OAAO,CAACO,IAAD,CAA3B;AACA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,EAAD,CAA1C;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ,EAH2B,CAI3B;AACA;;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACS,WAAL,EAAkB;AAClBJ,IAAAA,UAAU,CAACS,cAAX,CAA0BL,WAA1B;AACD,GAHQ,EAGN,CAACA,WAAD,CAHM,CAAT,CAP2B,CAY3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACS,WAAL,EAAkB;AAClBJ,IAAAA,UAAU,CAACU,uBAAX,CAAmC,OAAnC,EAA4C;AAC1CC,MAAAA,OAAO,EAAE,IADiC;AAE1CC,MAAAA,KAAK,EAAE,EAFmC;AAG1CC,MAAAA,MAAM,EAAE;AAHkC,KAA5C,EAKGC,IALH,CAKQC,GAAG,IAAI;AACXR,MAAAA,OAAO,CAACC,GAAR,CAAYO,GAAG,CAACC,IAAhB;AACAV,MAAAA,YAAY,CAACS,GAAG,CAACC,IAAJ,CAASX,SAAT,CAAmBY,KAAnB,CAAyBC,GAAzB,CAA6BC,QAAQ,IAAI;AACpD;AACA;AACA;AACA;AACA,eAAO;AACLC,UAAAA,IAAI,EAAED,QAAQ,CAACC,IADV;AAELC,UAAAA,WAAW,EAAEF,QAAQ,CAACE,WAFjB;AAGLC,UAAAA,GAAG,EAAEH,QAAQ,CAACG,GAHT;AAILC,UAAAA,QAAQ,EAAEJ,QAAQ,CAACK,MAAT,CAAgB,CAAhB,EAAmBC;AAJxB,SAAP;AAMD,OAXY,CAAD,CAAZ,CAFW,CAcX;AACD,KApBH,EAoBK,UAAUC,GAAV,EAAe;AAChBnB,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCkB,GAArC;AACD,KAtBH;AAuBD,GAzBQ,EAyBN,CAACtB,WAAD,CAzBM,CAAT;;AA2BA,MAAI,CAACC,SAAL,EAAgB;AACd,WAAO,sBAAP;AACD,GAFD,MAEO;AACL,wBACE;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,+BACE,QAAC,SAAD;AAAW,UAAA,SAAS,EAAC,WAArB;AAAiC,UAAA,KAAK,EAAE;AAAEsB,YAAAA,MAAM,EAAE;AAAV,WAAxC;AAAA,oBACGtB,SAAS,CAACa,GAAV,CAAcC,QAAQ,iBACrB,QAAC,QAAD;AAAU,YAAA,QAAQ,EAAEA;AAApB,aAAmCA,QAAQ,CAACG,GAA5C;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;AAGF;;GA9EQpB,S;UACaN,O;;;KADbM,S;AAgFT,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useAuth from '../useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport Playlist from './Playlist';\nimport { Container } from 'react-bootstrap';\n\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '04306bc8614e44bbb0f6f8071bb81e01',\n})\n\n\nfunction Dashboard({ code }) {\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState([]);\n  console.log(playlists);\n  // const [loading, setLoading] = useState(true);\n  // console.log('playlists:', playlists);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken)\n  }, [accessToken]);\n\n  // console.log(accessToken);\n\n  // useEffect(() => {\n  //   if (!accessToken) return;\n  //   SpotifyApi.getPlaylistsForCategory('party', {\n  //     country: 'BR',\n  //     limit: 10,\n  //     offset: 0\n  //   })\n  //     .then(function (data) {\n  //       let output = data.body.playlists.items.map(item => item.images[0].url);\n  //       setPlaylists(output);\n  //       // console.log(output);\n  //       // let output = data\n  //       // console.log(output);\n\n  //     }, function (err) {\n  //       console.log(\"Something went wrong!\", err);\n  //     });\n  // }, [accessToken]);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getPlaylistsForCategory('party', {\n      country: 'US',\n      limit: 20,\n      offset: 0\n    })\n      .then(res => {\n        console.log(res.body)\n        setPlaylists(res.body.playlists.items.map(playlist => {\n          // const smallestPlaylistImage = playlist.images.reduce((smallest, image) => {\n          //   if (image.height < smallest.height) return image\n          //   return smallest\n          // }, [])\n          return {\n            name: playlist.name,\n            description: playlist.description,\n            uri: playlist.uri,\n            albumUrl: playlist.images[0].url\n          }\n        }))\n        // console.log(res.body);\n      }, function (err) {\n        console.log(\"Something went wrong!\", err);\n      });\n  }, [accessToken]);\n\n  if (!playlists) {\n    return 'loading playlists...'\n  } else {\n    return (\n      <div>\n        <h3 classname=\"align-left\">Recommended Playlists</h3>\n        <div>\n          <Container className=\" flex-row\" style={{ height: \"100vh\" }} >\n            {playlists.map(playlist => (\n              <Playlist playlist={playlist} key={playlist.uri} />\n            ))}\n          </Container >\n        </div>\n      </div>\n    )\n  }\n\n\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}