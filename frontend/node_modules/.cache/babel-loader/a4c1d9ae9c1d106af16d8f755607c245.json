{"ast":null,"code":"var _jsxFileName = \"/Users/davidbroida/Desktop/MusicMatch2/frontend/src/components/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useAuth from '../useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport Playlist from './Playlist';\nimport { Container } from 'react-bootstrap';\nimport SearchPage from './SearchPage';\nimport Player from './Player';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AUTH_URL = \"https://accounts.spotify.com/authorize?client_id=04306bc8614e44bbb0f6f8071bb81e01&response_type=code&redirect_uri=http://localhost:3000&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state\";\nconst code = new URLSearchParams(window.location.search).get('code');\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '04306bc8614e44bbb0f6f8071bb81e01'\n});\n\nfunction Dashboard(_ref) {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState([]);\n  const [playingSong, setPlayingSong] = useState(); // console.log(playlists);\n\n  function choosePlaylist(playlist) {\n    setPlayingSong(playlist);\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getMe().then(function (data) {\n      let displayName = data.body.display_name;\n      return displayName;\n    }, function (err) {\n      console.log('Something went wrong!', err);\n    });\n  }, [accessToken]);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.getUserPlaylists(displayName).then(function (data) {\n      console.log('Retrieved playlists', data.body);\n    }, function (err) {\n      console.log('Something went wrong!', err);\n    });\n  });\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getPlaylistsForCategory('party', {\n      country: 'US',\n      limit: 20,\n      offset: 0\n    }).then(res => {\n      console.log(res.body);\n      setPlaylists(res.body.playlists.items.map(playlist => {\n        return {\n          name: playlist.name,\n          description: playlist.description,\n          uri: playlist.uri,\n          albumUrl: playlist.images[0].url\n        };\n      }));\n    }, function (err) {\n      console.log(\"Something went wrong!\", err);\n    });\n  }, [accessToken]); // if (code) {\n  //   return (\n  //     <SearchPage code={code} />\n  //   )\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        className: \"flex-row\",\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        },\n        children: playlists.map(playlist => /*#__PURE__*/_jsxDEV(Playlist, {\n          playlist: playlist,\n          choosePlaylist: choosePlaylist\n        }, playlist.uri, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        id: \"search-btn\",\n        className: \"btn btn-success btn-lg display-flex\",\n        href: \"/loadsearch\",\n        children: \"Search Music\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"music-player\",\n      children: /*#__PURE__*/_jsxDEV(Player, {\n        accessToken: accessToken,\n        trackUri: playingSong === null || playingSong === void 0 ? void 0 : playingSong.uri\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"enGV+Deg9ILXPUffOMoj9tFtWgs=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/davidbroida/Desktop/MusicMatch2/frontend/src/components/Dashboard.js"],"names":["React","useState","useEffect","useAuth","SpotifyWebApi","Playlist","Container","SearchPage","Player","AUTH_URL","code","URLSearchParams","window","location","search","get","SpotifyApi","clientId","Dashboard","accessToken","playlists","setPlaylists","playingSong","setPlayingSong","choosePlaylist","playlist","setAccessToken","getMe","then","data","displayName","body","display_name","err","console","log","spotifyApi","getUserPlaylists","getPlaylistsForCategory","country","limit","offset","res","items","map","name","description","uri","albumUrl","images","url","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useAuth from '../useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport Playlist from './Playlist';\nimport { Container } from 'react-bootstrap';\nimport SearchPage from './SearchPage';\nimport Player from './Player';\n\nconst AUTH_URL = \"https://accounts.spotify.com/authorize?client_id=04306bc8614e44bbb0f6f8071bb81e01&response_type=code&redirect_uri=http://localhost:3000&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state\";\n\nconst code = new URLSearchParams(window.location.search).get('code');\n\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '04306bc8614e44bbb0f6f8071bb81e01',\n})\n\nfunction Dashboard({ code }) {\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState([]);\n  const [playingSong, setPlayingSong] = useState();\n  // console.log(playlists);\n\n  function choosePlaylist(playlist) {\n    setPlayingSong(playlist);\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken)\n  }, [accessToken]);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getMe()\n      .then(function (data) {\n        let displayName = data.body.display_name;\n        return displayName;\n      }, function (err) {\n        console.log('Something went wrong!', err);\n      });\n  }, [accessToken]);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.getUserPlaylists(displayName)\n      .then(function (data) {\n        console.log('Retrieved playlists', data.body);\n      }, function (err) {\n        console.log('Something went wrong!', err);\n      });\n  })\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.getPlaylistsForCategory('party', {\n      country: 'US',\n      limit: 20,\n      offset: 0\n    })\n      .then(res => {\n        console.log(res.body)\n        setPlaylists(res.body.playlists.items.map(playlist => {\n\n          return {\n            name: playlist.name,\n            description: playlist.description,\n            uri: playlist.uri,\n            albumUrl: playlist.images[0].url\n          }\n        }))\n      }, function (err) {\n        console.log(\"Something went wrong!\", err);\n      });\n  }, [accessToken]);\n\n  // if (code) {\n  //   return (\n  //     <SearchPage code={code} />\n  //   )\n  // }\n\n  return (\n    <div>\n      <div>\n        <Container className=\"flex-row\" style={{ width: \"100%\", height: \"100%\" }}  >\n          {playlists.map(playlist => (\n            <Playlist playlist={playlist} key={playlist.uri} choosePlaylist={choosePlaylist} />\n          ))}\n        </Container >\n        <a id=\"search-btn\" className=\"btn btn-success btn-lg display-flex\" href='/loadsearch'>Search Music</a>\n      </div>\n      <br></br>\n      <div className=\"music-player\">\n        <Player accessToken={accessToken} trackUri={playingSong?.uri} />\n      </div>\n    </div>\n  )\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}